input {
  jdbc {
    jdbc_validate_connection => true
    jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
    jdbc_driver_library => ""
    jdbc_connection_string => "jdbc:mysql://qudb.c25ns8.us-east-1.rds.amazonaws.com:3306/content_schema"
    jdbc_paging_enabled => true
    jdbc_page_size => 100000
    jdbc_user => "admin"
    jdbc_password => "Q123"

    statement => "
                  SELECT t.id topic_id, t.title topic_title, t.slug topic_slug,
                      s.id subject_id, s.title subject_title, s.slug subject_slug,
                      c.id course_id, c.title course_title, c.slug course_slug,
                      b.id book_id, b.title book_title, b.aliased_title book_aliased_title, b.edition book_edition, b.isbn book_isbn, b.language book_language,
                      cs.id content_set_id, cs.title content_set_title, cs.type content_set_type, cs.slug content_set_slug,
                      ch.id chapter_id, ch.title chapter_title, ch.number chapter_number, ch.slug chapter_slug,
                      q.id question_id, q.type question_type, q.difficulty question_difficulty, q.text question_text, q.number question_number,
                      a.id answer_id, a.text answer_text,
                      qg.id question_group_id, qg.text question_group_text,
					            ch.deleted as chapter_deleted, q.deleted as question_deleted,
                      GREATEST(COALESCE(t.updated_at, 0), COALESCE(s.updated_at, 0), COALESCE(c.updated_at, 0), COALESCE(b.updated_at, 0), COALESCE(cs.updated_at, 0), COALESCE(ch.updated_at, 0), COALESCE(q.updated_at, 0), COALESCE(a.updated_at, 0), COALESCE(qg.updated_at, 0)) as updated

                      FROM topic t
                      inner join subject s on t.id = s.topic_id
                      inner join course c on s.id = c.subject_id
                      inner join book b on c.id = b.course_id
                      inner join content_set cs on b.id = cs.book_id
                      inner join chapter ch on cs.id = ch.content_set_id
                      inner join question q on ch.id = q.chapter_id
                      inner join answer a on q.id = a.question_id
                      LEFT join question_group qg on qg.id = q.question_group_id

                      WHERE (COALESCE(t.updated_at, 0) > :sql_last_value OR
                            COALESCE(s.updated_at, 0) > :sql_last_value OR
                            COALESCE(c.updated_at, 0) > :sql_last_value OR
                            COALESCE(b.updated_at, 0) > :sql_last_value OR
                            COALESCE(cs.updated_at, 0) > :sql_last_value OR
                            COALESCE(ch.updated_at, 0) > :sql_last_value OR
                            COALESCE(q.updated_at, 0) > :sql_last_value OR
                            COALESCE(a.updated_at, 0) > :sql_last_value OR
                            COALESCE(qg.updated_at, 0) > :sql_last_value)
                  "  
    schedule => "*/5 * * * *"
    use_column_value => true
    tracking_column => "updated"
    tracking_column_type => "timestamp"
  }
}


filter {
  # Encapsulate the fields into objects
  mutate {
    rename => {"topic_id" => "[topic][id]"}
    rename => {"topic_title" => "[topic][title]"}
    rename => {"topic_slug" => "[topic][slug]"}
    rename => {"subject_id" => "[subject][id]"}
    rename => {"subject_title" => "[subject][title]"}
    rename => {"subject_slug" => "[subject][slug]"}
    rename => {"course_id" => "[course][id]"}
    rename => {"course_title" => "[course][title]"}
    rename => {"course_slug" => "[course][slug]"}
    rename => {"book_id" => "[book][id]"}
    rename => {"book_title" => "[book][title]"}
    rename => {"book_aliased_title" => "[book][aliased_title]"}
    rename => {"book_edition" => "[book][edition]"}
    rename => {"book_isbn" => "[book][isbn]"}
    rename => {"book_language" => "[book][language]"}
    rename => {"content_set_id" => "[content_set][id]"}
    rename => {"content_set_title" => "[content_set][title]"}
    rename => {"content_set_type" => "[content_set][type]"}
    rename => {"content_set_slug" => "[content_set][slug]"}
    rename => {"chapter_id" => "[chapter][id]"}
    rename => {"chapter_title" => "[chapter][title]"}
    rename => {"chapter_number" => "[chapter][number]"}
    rename => {"chapter_slug" => "[chapter][slug]"}
    rename => {"question_id" => "[question][id]"}
    rename => {"question_type" => "[question][type]"}
    rename => {"question_number" => "[question][number]"}
    rename => {"question_difficulty" => "[question][difficulty]"}
    rename => {"question_text" => "[question][text]"}
    rename => {"answer_id" => "[answer][id]"}
    rename => {"answer_text" => "[answer][text]"}
    rename => {"question_group_id" => "[question_group][id]"}
    rename => {"question_group_text" => "[question_group][text]"}
  }

  # Create a new event to add the question
  # Group media entries by question id
  aggregate {
    task_id => "%{[question][id]}"
    code => "
      map['id'] = event.get('[question][id]')
      map['topic'] = event.get('[topic]')
      map['subject'] = event.get('[subject]')
      map['course'] = event.get('[course]')
      map['book'] = event.get('[book]')
      map['content_set'] = event.get('[content_set]')
      map['chapter'] = event.get('[chapter]')
      map['question_group'] ||= event.get('[question_group]')
      map['question'] ||= event.get('[question]')
      map['answer'] = event.get('[answer]')

      map['@metadata'] = {
        'doc_type': 'question',
        'deleted': event.get('question_deleted')
      }

      event.set('id', event.get('[chapter][id]').to_s)
      event.set('@metadata', {
        'doc_type': 'chapter',
        'deleted': event.get('chapter_deleted')
      })

      event.remove('question')
      event.remove('answer')
      event.remove('question_group')
      event.remove('question_deleted')
      event.remove('chapter_deleted')

    "
    push_previous_map_as_event => true
    timeout => 3
  }

  # Remove unnecessary fields
  mutate {
    remove_field => ['tags']
  }
}

output{
  if ![@metadata][deleted] {
      if [@metadata][doc_type] == 'chapter' {
          elasticsearch {
            hosts => ["https://dev-elasticsearch.quizplus.com:443"]
            user => "elastic"  
            password => "v13Uet98rWdKL8327sgQ69kF"
            index => "chapter"
            action => "update"
            doc_as_upsert => true
            document_id => "%{[id]}"
          }
      } else {
          elasticsearch {
            hosts => ["https://elasticsearch.qp.com:443"]
            user => "elastic"  
            password => "v13Usdfsdfsdf327sgQ69kF"
            index => "question"
            action => "update"
            doc_as_upsert => true
            document_id => "%{[id]}"
            routing => "%{[chapter][id]}"
        }
      }
  } else {
        if [@metadata][doc_type] == 'chapter' {
          elasticsearch {
            hosts => ["https://elasticsearch.qp.com:443"]
            user => "elastic"  
            password => "v13Uesdfsdfs327sgQ69kF"
            index => "chapter"
            action => "delete"
            document_id => "%{[id]}"
          }
      } else {
          elasticsearch {
            hosts => ["https://elasticsearch.qp.com:443"]
            user => "elastic"  
            password => "v13Uedsfsdfsdf7sgQ69kF"
            index => "question"
            action => "delete"
            document_id => "%{[id]}"
        }
      }
  }
}

